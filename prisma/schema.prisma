// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CONTRIBUTOR
  ADMIN
}

enum Category { // Categories for portfolio blog posts
  SHOWCASE
  AGILE
  TUTORIAL
  MUSIC
  ARTS
  BAKING
  GENERAL
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  likes         Like[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [email])
  authorId  String   //@map("author_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
  category  Category @default(GENERAL)
 
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  author    User     @relation(fields: [authorId], references: [email])
  authorId  String   //@map("author_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]

 
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  // Optional relation to Post. Only one of postId or commentId should be set for a Like.
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @map("post_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  // Optional relation to Comment. Only one of postId or commentId should be set for a Like.
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @map("comment_id")
 
  @@map("likes")

  @@index([postId])
  @@index([commentId])
}